动态规划问题：

1.求pow(x,n)
思路：求x的n次方，如果用for循环递归会出现time error，所以考虑用递归。x的n次方可以当作
x^n=x^(n/2)*x^(n/2)*x^(n%2) 然后递归求解，当n小于0时，x^n = 1/(x^(-n))
重点：写递归程序，要看整体，看问题是如何被分解的，而不能只盯着一步。
      如果n是偶数：x^n = x^(n/2)*x^(n/2)
      如果n是奇数：x^n = x^(n/2)*x^(n/2)*x^(n%2)
      在写递归的时候，找到收敛条件，就是n==0,然后不断处理指数部分即可

public double myPow(int n,doublex){
    if(n<0) return 1.0/pow(x,-n);
    else return pow(x,n);
}

public double pow(double x,int n){
    if(n == 0) return 1;
    double v= pow(x,n/2);
    if(n%2 == 0)  return v*v;
    else return v*v*x;
}


2.求sqrt(x)
思路：求x的平方根，运用二分查找去定位到一个更小的数a,然后比较a*a与x的大小，进而确定sqrt(x)
      逐一减小与折半比，效率差太多

public int mySqrt(int x){
    int low = 0;
    int high = x;
    while(low <= high){
      long mid = (long)(low+high)>>>1;
      if(mid*mid>x) low = (int)mid+1;
      else if(mid*mid<x) high = (int)mid-1;
           else return mid;
    }
    return high;
}